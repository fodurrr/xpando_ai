defmodule XPando.Repo.Migrations.InitialTables do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:nodes, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:name, :text, null: false)
      add(:public_key, :text, null: false)
      add(:private_key_hash, :text, null: false)
      add(:node_signature, :text, null: false)
      add(:endpoint, :text, null: false)
      add(:port, :bigint, default: 8080)
      add(:status, :text, default: "inactive")
      add(:last_seen_at, :utc_datetime)
      add(:connection_count, :bigint, default: 0)
      add(:specializations, {:array, :text}, default: [])
      add(:expertise_level, :decimal, default: "5.0", precision: 3, scale: 1)
      add(:reputation_score, :decimal, default: "50.0", precision: 5, scale: 2)
      add(:trust_rating, :decimal, default: "0.500", precision: 4, scale: 3)
      add(:validation_accuracy, :decimal, default: "0.500", precision: 4, scale: 3)
      add(:total_validations, :bigint, default: 0)
      add(:successful_validations, :bigint, default: 0)
      add(:knowledge_contributions, :bigint, default: 0)
      add(:region, :text)
      add(:response_time_avg, :bigint)
      add(:uptime_percentage, :decimal, default: "0.0", precision: 5, scale: 2)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create(unique_index(:nodes, [:endpoint, :port], name: "nodes_unique_endpoint_index"))

    create(unique_index(:nodes, [:public_key], name: "nodes_unique_public_key_index"))

    create table(:knowledge, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:content, :text, null: false)
      add(:title, :text, null: false)
      add(:knowledge_type, :text, default: "insight")
      add(:content_hash, :text, null: false)
      add(:version, :bigint, default: 1)
      add(:category, :text, null: false)
      add(:tags, {:array, :text}, default: [])
      add(:keywords, {:array, :text}, default: [])
      add(:validation_status, :text, default: "pending")
      add(:confidence_score, :decimal, default: "0.000", precision: 6, scale: 3)
      add(:consensus_threshold, :decimal, default: "0.750", precision: 4, scale: 3)
      add(:validation_count, :bigint, default: 0)
      add(:positive_validations, :bigint, default: 0)
      add(:relevance_score, :decimal, default: "0.500", precision: 4, scale: 3)
      add(:accuracy_rating, :decimal, default: "0.500", precision: 4, scale: 3)
      add(:novelty_score, :decimal, default: "0.500", precision: 4, scale: 3)
      add(:view_count, :bigint, default: 0)
      add(:reference_count, :bigint, default: 0)
      add(:application_count, :bigint, default: 0)
      add(:source_type, :text, default: "human_input")
      add(:external_references, {:array, :text}, default: [])
      add(:last_validated_at, :utc_datetime)
      add(:expires_at, :utc_datetime)

      add(
        :submitter_id,
        references(:nodes,
          column: :id,
          name: "knowledge_submitter_id_fkey",
          type: :uuid,
          prefix: "public"
        ), null: false)

      add(:validator_nodes, {:array, :uuid}, default: [])

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create(
      unique_index(:knowledge, [:content_hash, :version],
        name: "knowledge_unique_content_version_index"
      )
    )

    create table(:contributions, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)

      add(
        :node_id,
        references(:nodes,
          column: :id,
          name: "contributions_node_id_fkey",
          type: :uuid,
          prefix: "public"
        ), null: false)

      add(
        :knowledge_id,
        references(:knowledge,
          column: :id,
          name: "contributions_knowledge_id_fkey",
          type: :uuid,
          prefix: "public"
        ), null: false)

      add(:contribution_type, :text, null: false)
      add(:contribution_data, :map, default: %{})
      add(:quality_score, :decimal, default: "5.0", precision: 4, scale: 2)
      add(:accuracy_assessment, :decimal, default: "0.500", precision: 4, scale: 3)
      add(:value_rating, :decimal, default: "0.500", precision: 4, scale: 3)
      add(:novelty_factor, :decimal, default: "0.500", precision: 4, scale: 3)
      add(:base_reward, :decimal, default: "0.0000", precision: 10, scale: 4)
      add(:quality_bonus, :decimal, default: "0.0000", precision: 10, scale: 4)
      add(:network_bonus, :decimal, default: "0.0000", precision: 10, scale: 4)
      add(:total_reward, :decimal, default: "0.0000", precision: 10, scale: 4)
      add(:reward_status, :text, default: "pending")
      add(:impact_score, :decimal, default: "0.000", precision: 6, scale: 3)
      add(:influence_factor, :decimal, default: "0.000", precision: 4, scale: 3)
      add(:citation_count, :bigint, default: 0)
      add(:peer_reviews, :bigint, default: 0)
      add(:positive_reviews, :bigint, default: 0)
      add(:consensus_reached, :boolean, default: false)
      add(:consensus_score, :decimal, default: "0.000", precision: 4, scale: 3)
      add(:contribution_status, :text, default: "under_review")
      add(:reviewed_at, :utc_datetime)
      add(:accepted_at, :utc_datetime)
      add(:expires_at, :utc_datetime)
      add(:feedback_score, :decimal, default: "5.0", precision: 4, scale: 2)
      add(:learning_value, :decimal, default: "0.500", precision: 4, scale: 3)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create(
      unique_index(:contributions, [:node_id, :knowledge_id, :contribution_type],
        name: "contributions_unique_node_knowledge_type_index"
      )
    )
  end

  def down do
    drop_if_exists(
      unique_index(:contributions, [:node_id, :knowledge_id, :contribution_type],
        name: "contributions_unique_node_knowledge_type_index"
      )
    )

    drop(constraint(:contributions, "contributions_node_id_fkey"))

    drop(constraint(:contributions, "contributions_knowledge_id_fkey"))

    drop(table(:contributions))

    drop_if_exists(
      unique_index(:knowledge, [:content_hash, :version],
        name: "knowledge_unique_content_version_index"
      )
    )

    drop(constraint(:knowledge, "knowledge_submitter_id_fkey"))

    drop(table(:knowledge))

    drop_if_exists(unique_index(:nodes, [:public_key], name: "nodes_unique_public_key_index"))

    drop_if_exists(unique_index(:nodes, [:endpoint, :port], name: "nodes_unique_endpoint_index"))

    drop(table(:nodes))
  end
end
